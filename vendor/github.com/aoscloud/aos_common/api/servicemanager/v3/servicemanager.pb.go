// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.6.1
// source: servicemanager/v3/servicemanager.proto

package servicemanager

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SMIncomingMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SMIncomingMessage:
	//	*SMIncomingMessages_GetUnitConfigStatus
	//	*SMIncomingMessages_CheckUnitConfig
	//	*SMIncomingMessages_SetUnitConfig
	//	*SMIncomingMessages_RunInstances
	//	*SMIncomingMessages_OverrideEnvVars
	//	*SMIncomingMessages_SystemLogRequest
	//	*SMIncomingMessages_InstanceLogRequest
	//	*SMIncomingMessages_InstanceCrashLogRequest
	//	*SMIncomingMessages_GetNodeMonitoring
	SMIncomingMessage isSMIncomingMessages_SMIncomingMessage `protobuf_oneof:"SMIncomingMessage"`
}

func (x *SMIncomingMessages) Reset() {
	*x = SMIncomingMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMIncomingMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMIncomingMessages) ProtoMessage() {}

func (x *SMIncomingMessages) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMIncomingMessages.ProtoReflect.Descriptor instead.
func (*SMIncomingMessages) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{0}
}

func (m *SMIncomingMessages) GetSMIncomingMessage() isSMIncomingMessages_SMIncomingMessage {
	if m != nil {
		return m.SMIncomingMessage
	}
	return nil
}

func (x *SMIncomingMessages) GetGetUnitConfigStatus() *GetUnitConfigStatus {
	if x, ok := x.GetSMIncomingMessage().(*SMIncomingMessages_GetUnitConfigStatus); ok {
		return x.GetUnitConfigStatus
	}
	return nil
}

func (x *SMIncomingMessages) GetCheckUnitConfig() *CheckUnitConfig {
	if x, ok := x.GetSMIncomingMessage().(*SMIncomingMessages_CheckUnitConfig); ok {
		return x.CheckUnitConfig
	}
	return nil
}

func (x *SMIncomingMessages) GetSetUnitConfig() *SetUnitConfig {
	if x, ok := x.GetSMIncomingMessage().(*SMIncomingMessages_SetUnitConfig); ok {
		return x.SetUnitConfig
	}
	return nil
}

func (x *SMIncomingMessages) GetRunInstances() *RunInstances {
	if x, ok := x.GetSMIncomingMessage().(*SMIncomingMessages_RunInstances); ok {
		return x.RunInstances
	}
	return nil
}

func (x *SMIncomingMessages) GetOverrideEnvVars() *OverrideEnvVars {
	if x, ok := x.GetSMIncomingMessage().(*SMIncomingMessages_OverrideEnvVars); ok {
		return x.OverrideEnvVars
	}
	return nil
}

func (x *SMIncomingMessages) GetSystemLogRequest() *SystemLogRequest {
	if x, ok := x.GetSMIncomingMessage().(*SMIncomingMessages_SystemLogRequest); ok {
		return x.SystemLogRequest
	}
	return nil
}

func (x *SMIncomingMessages) GetInstanceLogRequest() *InstanceLogRequest {
	if x, ok := x.GetSMIncomingMessage().(*SMIncomingMessages_InstanceLogRequest); ok {
		return x.InstanceLogRequest
	}
	return nil
}

func (x *SMIncomingMessages) GetInstanceCrashLogRequest() *InstanceCrashLogRequest {
	if x, ok := x.GetSMIncomingMessage().(*SMIncomingMessages_InstanceCrashLogRequest); ok {
		return x.InstanceCrashLogRequest
	}
	return nil
}

func (x *SMIncomingMessages) GetGetNodeMonitoring() *GetNodeMonitoring {
	if x, ok := x.GetSMIncomingMessage().(*SMIncomingMessages_GetNodeMonitoring); ok {
		return x.GetNodeMonitoring
	}
	return nil
}

type isSMIncomingMessages_SMIncomingMessage interface {
	isSMIncomingMessages_SMIncomingMessage()
}

type SMIncomingMessages_GetUnitConfigStatus struct {
	GetUnitConfigStatus *GetUnitConfigStatus `protobuf:"bytes,1,opt,name=get_unit_config_status,json=getUnitConfigStatus,proto3,oneof"`
}

type SMIncomingMessages_CheckUnitConfig struct {
	CheckUnitConfig *CheckUnitConfig `protobuf:"bytes,2,opt,name=check_unit_config,json=checkUnitConfig,proto3,oneof"`
}

type SMIncomingMessages_SetUnitConfig struct {
	SetUnitConfig *SetUnitConfig `protobuf:"bytes,3,opt,name=set_unit_config,json=setUnitConfig,proto3,oneof"`
}

type SMIncomingMessages_RunInstances struct {
	RunInstances *RunInstances `protobuf:"bytes,4,opt,name=run_instances,json=runInstances,proto3,oneof"`
}

type SMIncomingMessages_OverrideEnvVars struct {
	OverrideEnvVars *OverrideEnvVars `protobuf:"bytes,5,opt,name=override_env_vars,json=overrideEnvVars,proto3,oneof"`
}

type SMIncomingMessages_SystemLogRequest struct {
	SystemLogRequest *SystemLogRequest `protobuf:"bytes,6,opt,name=system_log_request,json=systemLogRequest,proto3,oneof"`
}

type SMIncomingMessages_InstanceLogRequest struct {
	InstanceLogRequest *InstanceLogRequest `protobuf:"bytes,7,opt,name=instance_log_request,json=instanceLogRequest,proto3,oneof"`
}

type SMIncomingMessages_InstanceCrashLogRequest struct {
	InstanceCrashLogRequest *InstanceCrashLogRequest `protobuf:"bytes,8,opt,name=instance_crash_log_request,json=instanceCrashLogRequest,proto3,oneof"`
}

type SMIncomingMessages_GetNodeMonitoring struct {
	GetNodeMonitoring *GetNodeMonitoring `protobuf:"bytes,9,opt,name=get_node_monitoring,json=getNodeMonitoring,proto3,oneof"`
}

func (*SMIncomingMessages_GetUnitConfigStatus) isSMIncomingMessages_SMIncomingMessage() {}

func (*SMIncomingMessages_CheckUnitConfig) isSMIncomingMessages_SMIncomingMessage() {}

func (*SMIncomingMessages_SetUnitConfig) isSMIncomingMessages_SMIncomingMessage() {}

func (*SMIncomingMessages_RunInstances) isSMIncomingMessages_SMIncomingMessage() {}

func (*SMIncomingMessages_OverrideEnvVars) isSMIncomingMessages_SMIncomingMessage() {}

func (*SMIncomingMessages_SystemLogRequest) isSMIncomingMessages_SMIncomingMessage() {}

func (*SMIncomingMessages_InstanceLogRequest) isSMIncomingMessages_SMIncomingMessage() {}

func (*SMIncomingMessages_InstanceCrashLogRequest) isSMIncomingMessages_SMIncomingMessage() {}

func (*SMIncomingMessages_GetNodeMonitoring) isSMIncomingMessages_SMIncomingMessage() {}

type GetUnitConfigStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetUnitConfigStatus) Reset() {
	*x = GetUnitConfigStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnitConfigStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnitConfigStatus) ProtoMessage() {}

func (x *GetUnitConfigStatus) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnitConfigStatus.ProtoReflect.Descriptor instead.
func (*GetUnitConfigStatus) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{1}
}

type CheckUnitConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitConfig    string `protobuf:"bytes,1,opt,name=unit_config,json=unitConfig,proto3" json:"unit_config,omitempty"`
	VendorVersion string `protobuf:"bytes,2,opt,name=vendor_version,json=vendorVersion,proto3" json:"vendor_version,omitempty"`
}

func (x *CheckUnitConfig) Reset() {
	*x = CheckUnitConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUnitConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUnitConfig) ProtoMessage() {}

func (x *CheckUnitConfig) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUnitConfig.ProtoReflect.Descriptor instead.
func (*CheckUnitConfig) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{2}
}

func (x *CheckUnitConfig) GetUnitConfig() string {
	if x != nil {
		return x.UnitConfig
	}
	return ""
}

func (x *CheckUnitConfig) GetVendorVersion() string {
	if x != nil {
		return x.VendorVersion
	}
	return ""
}

type SetUnitConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitConfig    string `protobuf:"bytes,1,opt,name=unit_config,json=unitConfig,proto3" json:"unit_config,omitempty"`
	VendorVersion string `protobuf:"bytes,2,opt,name=vendor_version,json=vendorVersion,proto3" json:"vendor_version,omitempty"`
}

func (x *SetUnitConfig) Reset() {
	*x = SetUnitConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetUnitConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetUnitConfig) ProtoMessage() {}

func (x *SetUnitConfig) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetUnitConfig.ProtoReflect.Descriptor instead.
func (*SetUnitConfig) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{3}
}

func (x *SetUnitConfig) GetUnitConfig() string {
	if x != nil {
		return x.UnitConfig
	}
	return ""
}

func (x *SetUnitConfig) GetVendorVersion() string {
	if x != nil {
		return x.VendorVersion
	}
	return ""
}

type RunInstances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services     []*ServiceInfo  `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	Layers       []*LayerInfo    `protobuf:"bytes,2,rep,name=layers,proto3" json:"layers,omitempty"`
	Instances    []*InstanceInfo `protobuf:"bytes,3,rep,name=instances,proto3" json:"instances,omitempty"`
	ForceRestart bool            `protobuf:"varint,4,opt,name=force_restart,json=forceRestart,proto3" json:"force_restart,omitempty"`
}

func (x *RunInstances) Reset() {
	*x = RunInstances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunInstances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunInstances) ProtoMessage() {}

func (x *RunInstances) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunInstances.ProtoReflect.Descriptor instead.
func (*RunInstances) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{4}
}

func (x *RunInstances) GetServices() []*ServiceInfo {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *RunInstances) GetLayers() []*LayerInfo {
	if x != nil {
		return x.Layers
	}
	return nil
}

func (x *RunInstances) GetInstances() []*InstanceInfo {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *RunInstances) GetForceRestart() bool {
	if x != nil {
		return x.ForceRestart
	}
	return false
}

type ServiceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionInfo *VesionInfo `protobuf:"bytes,1,opt,name=version_info,json=versionInfo,proto3" json:"version_info,omitempty"`
	Url         string      `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	ServiceId   string      `protobuf:"bytes,3,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	ProviderId  string      `protobuf:"bytes,4,opt,name=provider_id,json=providerId,proto3" json:"provider_id,omitempty"`
	Gid         uint32      `protobuf:"varint,5,opt,name=gid,proto3" json:"gid,omitempty"`
	Sha256      []byte      `protobuf:"bytes,6,opt,name=sha256,proto3" json:"sha256,omitempty"`
	Sha512      []byte      `protobuf:"bytes,7,opt,name=sha512,proto3" json:"sha512,omitempty"`
	Size        uint64      `protobuf:"varint,8,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *ServiceInfo) Reset() {
	*x = ServiceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceInfo) ProtoMessage() {}

func (x *ServiceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceInfo.ProtoReflect.Descriptor instead.
func (*ServiceInfo) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{5}
}

func (x *ServiceInfo) GetVersionInfo() *VesionInfo {
	if x != nil {
		return x.VersionInfo
	}
	return nil
}

func (x *ServiceInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ServiceInfo) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *ServiceInfo) GetProviderId() string {
	if x != nil {
		return x.ProviderId
	}
	return ""
}

func (x *ServiceInfo) GetGid() uint32 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *ServiceInfo) GetSha256() []byte {
	if x != nil {
		return x.Sha256
	}
	return nil
}

func (x *ServiceInfo) GetSha512() []byte {
	if x != nil {
		return x.Sha512
	}
	return nil
}

func (x *ServiceInfo) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type LayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionInfo *VesionInfo `protobuf:"bytes,1,opt,name=version_info,json=versionInfo,proto3" json:"version_info,omitempty"`
	Url         string      `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	LayerId     string      `protobuf:"bytes,3,opt,name=layer_id,json=layerId,proto3" json:"layer_id,omitempty"`
	Digest      string      `protobuf:"bytes,4,opt,name=digest,proto3" json:"digest,omitempty"`
	Sha256      []byte      `protobuf:"bytes,5,opt,name=sha256,proto3" json:"sha256,omitempty"`
	Sha512      []byte      `protobuf:"bytes,6,opt,name=sha512,proto3" json:"sha512,omitempty"`
	Size        uint64      `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *LayerInfo) Reset() {
	*x = LayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LayerInfo) ProtoMessage() {}

func (x *LayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LayerInfo.ProtoReflect.Descriptor instead.
func (*LayerInfo) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{6}
}

func (x *LayerInfo) GetVersionInfo() *VesionInfo {
	if x != nil {
		return x.VersionInfo
	}
	return nil
}

func (x *LayerInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *LayerInfo) GetLayerId() string {
	if x != nil {
		return x.LayerId
	}
	return ""
}

func (x *LayerInfo) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *LayerInfo) GetSha256() []byte {
	if x != nil {
		return x.Sha256
	}
	return nil
}

func (x *LayerInfo) GetSha512() []byte {
	if x != nil {
		return x.Sha512
	}
	return nil
}

func (x *LayerInfo) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type VesionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AosVersion    uint64 `protobuf:"varint,1,opt,name=aos_version,json=aosVersion,proto3" json:"aos_version,omitempty"`
	VendorVersion string `protobuf:"bytes,2,opt,name=vendor_version,json=vendorVersion,proto3" json:"vendor_version,omitempty"`
	Description   string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *VesionInfo) Reset() {
	*x = VesionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VesionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VesionInfo) ProtoMessage() {}

func (x *VesionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VesionInfo.ProtoReflect.Descriptor instead.
func (*VesionInfo) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{7}
}

func (x *VesionInfo) GetAosVersion() uint64 {
	if x != nil {
		return x.AosVersion
	}
	return 0
}

func (x *VesionInfo) GetVendorVersion() string {
	if x != nil {
		return x.VendorVersion
	}
	return ""
}

func (x *VesionInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type InstanceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance    *InstanceIdent `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	Uid         uint32         `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Priority    uint64         `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	StoragePath string         `protobuf:"bytes,4,opt,name=storage_path,json=storagePath,proto3" json:"storage_path,omitempty"`
	StatePath   string         `protobuf:"bytes,5,opt,name=state_path,json=statePath,proto3" json:"state_path,omitempty"`
}

func (x *InstanceInfo) Reset() {
	*x = InstanceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceInfo) ProtoMessage() {}

func (x *InstanceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceInfo.ProtoReflect.Descriptor instead.
func (*InstanceInfo) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{8}
}

func (x *InstanceInfo) GetInstance() *InstanceIdent {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *InstanceInfo) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *InstanceInfo) GetPriority() uint64 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *InstanceInfo) GetStoragePath() string {
	if x != nil {
		return x.StoragePath
	}
	return ""
}

func (x *InstanceInfo) GetStatePath() string {
	if x != nil {
		return x.StatePath
	}
	return ""
}

type OverrideEnvVars struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvVars []*OverrideInstanceEnvVar `protobuf:"bytes,1,rep,name=env_vars,json=envVars,proto3" json:"env_vars,omitempty"`
}

func (x *OverrideEnvVars) Reset() {
	*x = OverrideEnvVars{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverrideEnvVars) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverrideEnvVars) ProtoMessage() {}

func (x *OverrideEnvVars) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverrideEnvVars.ProtoReflect.Descriptor instead.
func (*OverrideEnvVars) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{9}
}

func (x *OverrideEnvVars) GetEnvVars() []*OverrideInstanceEnvVar {
	if x != nil {
		return x.EnvVars
	}
	return nil
}

type OverrideInstanceEnvVar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance *InstanceIdent `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	Vars     []*EnvVarInfo  `protobuf:"bytes,2,rep,name=vars,proto3" json:"vars,omitempty"`
}

func (x *OverrideInstanceEnvVar) Reset() {
	*x = OverrideInstanceEnvVar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverrideInstanceEnvVar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverrideInstanceEnvVar) ProtoMessage() {}

func (x *OverrideInstanceEnvVar) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverrideInstanceEnvVar.ProtoReflect.Descriptor instead.
func (*OverrideInstanceEnvVar) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{10}
}

func (x *OverrideInstanceEnvVar) GetInstance() *InstanceIdent {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *OverrideInstanceEnvVar) GetVars() []*EnvVarInfo {
	if x != nil {
		return x.Vars
	}
	return nil
}

type EnvVarInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VarId    string               `protobuf:"bytes,1,opt,name=var_id,json=varId,proto3" json:"var_id,omitempty"`
	Variable string               `protobuf:"bytes,2,opt,name=variable,proto3" json:"variable,omitempty"`
	Ttl      *timestamp.Timestamp `protobuf:"bytes,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *EnvVarInfo) Reset() {
	*x = EnvVarInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvVarInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvVarInfo) ProtoMessage() {}

func (x *EnvVarInfo) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvVarInfo.ProtoReflect.Descriptor instead.
func (*EnvVarInfo) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{11}
}

func (x *EnvVarInfo) GetVarId() string {
	if x != nil {
		return x.VarId
	}
	return ""
}

func (x *EnvVarInfo) GetVariable() string {
	if x != nil {
		return x.Variable
	}
	return ""
}

func (x *EnvVarInfo) GetTtl() *timestamp.Timestamp {
	if x != nil {
		return x.Ttl
	}
	return nil
}

type SystemLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogId string               `protobuf:"bytes,1,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	From  *timestamp.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Till  *timestamp.Timestamp `protobuf:"bytes,3,opt,name=till,proto3" json:"till,omitempty"`
}

func (x *SystemLogRequest) Reset() {
	*x = SystemLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemLogRequest) ProtoMessage() {}

func (x *SystemLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemLogRequest.ProtoReflect.Descriptor instead.
func (*SystemLogRequest) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{12}
}

func (x *SystemLogRequest) GetLogId() string {
	if x != nil {
		return x.LogId
	}
	return ""
}

func (x *SystemLogRequest) GetFrom() *timestamp.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *SystemLogRequest) GetTill() *timestamp.Timestamp {
	if x != nil {
		return x.Till
	}
	return nil
}

type InstanceLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogId    string               `protobuf:"bytes,1,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	Instance *InstanceIdent       `protobuf:"bytes,2,opt,name=instance,proto3" json:"instance,omitempty"`
	From     *timestamp.Timestamp `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	Till     *timestamp.Timestamp `protobuf:"bytes,4,opt,name=till,proto3" json:"till,omitempty"`
}

func (x *InstanceLogRequest) Reset() {
	*x = InstanceLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceLogRequest) ProtoMessage() {}

func (x *InstanceLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceLogRequest.ProtoReflect.Descriptor instead.
func (*InstanceLogRequest) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{13}
}

func (x *InstanceLogRequest) GetLogId() string {
	if x != nil {
		return x.LogId
	}
	return ""
}

func (x *InstanceLogRequest) GetInstance() *InstanceIdent {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *InstanceLogRequest) GetFrom() *timestamp.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *InstanceLogRequest) GetTill() *timestamp.Timestamp {
	if x != nil {
		return x.Till
	}
	return nil
}

type InstanceCrashLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogId    string               `protobuf:"bytes,1,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	Instance *InstanceIdent       `protobuf:"bytes,2,opt,name=instance,proto3" json:"instance,omitempty"`
	From     *timestamp.Timestamp `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	Till     *timestamp.Timestamp `protobuf:"bytes,4,opt,name=till,proto3" json:"till,omitempty"`
}

func (x *InstanceCrashLogRequest) Reset() {
	*x = InstanceCrashLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceCrashLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceCrashLogRequest) ProtoMessage() {}

func (x *InstanceCrashLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceCrashLogRequest.ProtoReflect.Descriptor instead.
func (*InstanceCrashLogRequest) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{14}
}

func (x *InstanceCrashLogRequest) GetLogId() string {
	if x != nil {
		return x.LogId
	}
	return ""
}

func (x *InstanceCrashLogRequest) GetInstance() *InstanceIdent {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *InstanceCrashLogRequest) GetFrom() *timestamp.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *InstanceCrashLogRequest) GetTill() *timestamp.Timestamp {
	if x != nil {
		return x.Till
	}
	return nil
}

type GetNodeMonitoring struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetNodeMonitoring) Reset() {
	*x = GetNodeMonitoring{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeMonitoring) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeMonitoring) ProtoMessage() {}

func (x *GetNodeMonitoring) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeMonitoring.ProtoReflect.Descriptor instead.
func (*GetNodeMonitoring) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{15}
}

type SMOutgoingMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SMOutgoingMessage:
	//	*SMOutgoingMessages_NodeConfiguration
	//	*SMOutgoingMessages_UnitConfigStatus
	//	*SMOutgoingMessages_RunInstancesStatus
	//	*SMOutgoingMessages_UpdateInstancesStatus
	//	*SMOutgoingMessages_OverrideEnvVarStatus
	//	*SMOutgoingMessages_Log
	//	*SMOutgoingMessages_NodeMonitoring
	//	*SMOutgoingMessages_Alert
	SMOutgoingMessage isSMOutgoingMessages_SMOutgoingMessage `protobuf_oneof:"SMOutgoingMessage"`
}

func (x *SMOutgoingMessages) Reset() {
	*x = SMOutgoingMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMOutgoingMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMOutgoingMessages) ProtoMessage() {}

func (x *SMOutgoingMessages) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMOutgoingMessages.ProtoReflect.Descriptor instead.
func (*SMOutgoingMessages) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{16}
}

func (m *SMOutgoingMessages) GetSMOutgoingMessage() isSMOutgoingMessages_SMOutgoingMessage {
	if m != nil {
		return m.SMOutgoingMessage
	}
	return nil
}

func (x *SMOutgoingMessages) GetNodeConfiguration() *NodeConfiguration {
	if x, ok := x.GetSMOutgoingMessage().(*SMOutgoingMessages_NodeConfiguration); ok {
		return x.NodeConfiguration
	}
	return nil
}

func (x *SMOutgoingMessages) GetUnitConfigStatus() *UnitConfigStatus {
	if x, ok := x.GetSMOutgoingMessage().(*SMOutgoingMessages_UnitConfigStatus); ok {
		return x.UnitConfigStatus
	}
	return nil
}

func (x *SMOutgoingMessages) GetRunInstancesStatus() *RunInstancesStatus {
	if x, ok := x.GetSMOutgoingMessage().(*SMOutgoingMessages_RunInstancesStatus); ok {
		return x.RunInstancesStatus
	}
	return nil
}

func (x *SMOutgoingMessages) GetUpdateInstancesStatus() *UpdateInstancesStatus {
	if x, ok := x.GetSMOutgoingMessage().(*SMOutgoingMessages_UpdateInstancesStatus); ok {
		return x.UpdateInstancesStatus
	}
	return nil
}

func (x *SMOutgoingMessages) GetOverrideEnvVarStatus() *OverrideEnvVarStatus {
	if x, ok := x.GetSMOutgoingMessage().(*SMOutgoingMessages_OverrideEnvVarStatus); ok {
		return x.OverrideEnvVarStatus
	}
	return nil
}

func (x *SMOutgoingMessages) GetLog() *LogData {
	if x, ok := x.GetSMOutgoingMessage().(*SMOutgoingMessages_Log); ok {
		return x.Log
	}
	return nil
}

func (x *SMOutgoingMessages) GetNodeMonitoring() *NodeMonitoring {
	if x, ok := x.GetSMOutgoingMessage().(*SMOutgoingMessages_NodeMonitoring); ok {
		return x.NodeMonitoring
	}
	return nil
}

func (x *SMOutgoingMessages) GetAlert() *Alert {
	if x, ok := x.GetSMOutgoingMessage().(*SMOutgoingMessages_Alert); ok {
		return x.Alert
	}
	return nil
}

type isSMOutgoingMessages_SMOutgoingMessage interface {
	isSMOutgoingMessages_SMOutgoingMessage()
}

type SMOutgoingMessages_NodeConfiguration struct {
	NodeConfiguration *NodeConfiguration `protobuf:"bytes,1,opt,name=node_configuration,json=nodeConfiguration,proto3,oneof"`
}

type SMOutgoingMessages_UnitConfigStatus struct {
	UnitConfigStatus *UnitConfigStatus `protobuf:"bytes,2,opt,name=unit_config_status,json=unitConfigStatus,proto3,oneof"`
}

type SMOutgoingMessages_RunInstancesStatus struct {
	RunInstancesStatus *RunInstancesStatus `protobuf:"bytes,3,opt,name=run_instances_status,json=runInstancesStatus,proto3,oneof"`
}

type SMOutgoingMessages_UpdateInstancesStatus struct {
	UpdateInstancesStatus *UpdateInstancesStatus `protobuf:"bytes,4,opt,name=update_instances_status,json=updateInstancesStatus,proto3,oneof"`
}

type SMOutgoingMessages_OverrideEnvVarStatus struct {
	OverrideEnvVarStatus *OverrideEnvVarStatus `protobuf:"bytes,5,opt,name=override_env_var_status,json=overrideEnvVarStatus,proto3,oneof"`
}

type SMOutgoingMessages_Log struct {
	Log *LogData `protobuf:"bytes,6,opt,name=log,proto3,oneof"`
}

type SMOutgoingMessages_NodeMonitoring struct {
	NodeMonitoring *NodeMonitoring `protobuf:"bytes,7,opt,name=node_monitoring,json=nodeMonitoring,proto3,oneof"`
}

type SMOutgoingMessages_Alert struct {
	Alert *Alert `protobuf:"bytes,8,opt,name=alert,proto3,oneof"`
}

func (*SMOutgoingMessages_NodeConfiguration) isSMOutgoingMessages_SMOutgoingMessage() {}

func (*SMOutgoingMessages_UnitConfigStatus) isSMOutgoingMessages_SMOutgoingMessage() {}

func (*SMOutgoingMessages_RunInstancesStatus) isSMOutgoingMessages_SMOutgoingMessage() {}

func (*SMOutgoingMessages_UpdateInstancesStatus) isSMOutgoingMessages_SMOutgoingMessage() {}

func (*SMOutgoingMessages_OverrideEnvVarStatus) isSMOutgoingMessages_SMOutgoingMessage() {}

func (*SMOutgoingMessages_Log) isSMOutgoingMessages_SMOutgoingMessage() {}

func (*SMOutgoingMessages_NodeMonitoring) isSMOutgoingMessages_SMOutgoingMessage() {}

func (*SMOutgoingMessages_Alert) isSMOutgoingMessages_SMOutgoingMessage() {}

type NodeConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId         string       `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	NodeType       string       `protobuf:"bytes,2,opt,name=node_type,json=nodeType,proto3" json:"node_type,omitempty"`
	RemoteNode     bool         `protobuf:"varint,3,opt,name=remote_node,json=remoteNode,proto3" json:"remote_node,omitempty"`
	RunnerFeatures []string     `protobuf:"bytes,4,rep,name=runner_features,json=runnerFeatures,proto3" json:"runner_features,omitempty"`
	NumCpus        uint64       `protobuf:"varint,5,opt,name=num_cpus,json=numCpus,proto3" json:"num_cpus,omitempty"`
	TotalRam       uint64       `protobuf:"varint,6,opt,name=total_ram,json=totalRam,proto3" json:"total_ram,omitempty"`
	Partitions     []*Partition `protobuf:"bytes,7,rep,name=partitions,proto3" json:"partitions,omitempty"`
}

func (x *NodeConfiguration) Reset() {
	*x = NodeConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeConfiguration) ProtoMessage() {}

func (x *NodeConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeConfiguration.ProtoReflect.Descriptor instead.
func (*NodeConfiguration) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{17}
}

func (x *NodeConfiguration) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *NodeConfiguration) GetNodeType() string {
	if x != nil {
		return x.NodeType
	}
	return ""
}

func (x *NodeConfiguration) GetRemoteNode() bool {
	if x != nil {
		return x.RemoteNode
	}
	return false
}

func (x *NodeConfiguration) GetRunnerFeatures() []string {
	if x != nil {
		return x.RunnerFeatures
	}
	return nil
}

func (x *NodeConfiguration) GetNumCpus() uint64 {
	if x != nil {
		return x.NumCpus
	}
	return 0
}

func (x *NodeConfiguration) GetTotalRam() uint64 {
	if x != nil {
		return x.TotalRam
	}
	return 0
}

func (x *NodeConfiguration) GetPartitions() []*Partition {
	if x != nil {
		return x.Partitions
	}
	return nil
}

type Partition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Types     []string `protobuf:"bytes,2,rep,name=types,proto3" json:"types,omitempty"`
	TotalSize uint64   `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *Partition) Reset() {
	*x = Partition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Partition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Partition) ProtoMessage() {}

func (x *Partition) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Partition.ProtoReflect.Descriptor instead.
func (*Partition) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{18}
}

func (x *Partition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Partition) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *Partition) GetTotalSize() uint64 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type UnitConfigStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VendorVersion string `protobuf:"bytes,1,opt,name=vendor_version,json=vendorVersion,proto3" json:"vendor_version,omitempty"`
	Error         string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *UnitConfigStatus) Reset() {
	*x = UnitConfigStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnitConfigStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitConfigStatus) ProtoMessage() {}

func (x *UnitConfigStatus) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitConfigStatus.ProtoReflect.Descriptor instead.
func (*UnitConfigStatus) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{19}
}

func (x *UnitConfigStatus) GetVendorVersion() string {
	if x != nil {
		return x.VendorVersion
	}
	return ""
}

func (x *UnitConfigStatus) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type RunInstancesStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances []*InstanceStatus `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *RunInstancesStatus) Reset() {
	*x = RunInstancesStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunInstancesStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunInstancesStatus) ProtoMessage() {}

func (x *RunInstancesStatus) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunInstancesStatus.ProtoReflect.Descriptor instead.
func (*RunInstancesStatus) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{20}
}

func (x *RunInstancesStatus) GetInstances() []*InstanceStatus {
	if x != nil {
		return x.Instances
	}
	return nil
}

type UpdateInstancesStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances []*InstanceStatus `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *UpdateInstancesStatus) Reset() {
	*x = UpdateInstancesStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInstancesStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInstancesStatus) ProtoMessage() {}

func (x *UpdateInstancesStatus) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInstancesStatus.ProtoReflect.Descriptor instead.
func (*UpdateInstancesStatus) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateInstancesStatus) GetInstances() []*InstanceStatus {
	if x != nil {
		return x.Instances
	}
	return nil
}

type InstanceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance   *InstanceIdent `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	AosVersion uint64         `protobuf:"varint,2,opt,name=aos_version,json=aosVersion,proto3" json:"aos_version,omitempty"`
	RunState   string         `protobuf:"bytes,3,opt,name=run_state,json=runState,proto3" json:"run_state,omitempty"`
	ErrorInfo  *ErrorInfo     `protobuf:"bytes,4,opt,name=error_info,json=errorInfo,proto3" json:"error_info,omitempty"`
}

func (x *InstanceStatus) Reset() {
	*x = InstanceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceStatus) ProtoMessage() {}

func (x *InstanceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceStatus.ProtoReflect.Descriptor instead.
func (*InstanceStatus) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{22}
}

func (x *InstanceStatus) GetInstance() *InstanceIdent {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *InstanceStatus) GetAosVersion() uint64 {
	if x != nil {
		return x.AosVersion
	}
	return 0
}

func (x *InstanceStatus) GetRunState() string {
	if x != nil {
		return x.RunState
	}
	return ""
}

func (x *InstanceStatus) GetErrorInfo() *ErrorInfo {
	if x != nil {
		return x.ErrorInfo
	}
	return nil
}

type InstanceIdent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	SubjectId string `protobuf:"bytes,2,opt,name=subject_id,json=subjectId,proto3" json:"subject_id,omitempty"`
	Instance  int64  `protobuf:"varint,3,opt,name=instance,proto3" json:"instance,omitempty"`
}

func (x *InstanceIdent) Reset() {
	*x = InstanceIdent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceIdent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceIdent) ProtoMessage() {}

func (x *InstanceIdent) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceIdent.ProtoReflect.Descriptor instead.
func (*InstanceIdent) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{23}
}

func (x *InstanceIdent) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *InstanceIdent) GetSubjectId() string {
	if x != nil {
		return x.SubjectId
	}
	return ""
}

func (x *InstanceIdent) GetInstance() int64 {
	if x != nil {
		return x.Instance
	}
	return 0
}

type ErrorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AosCode  int32  `protobuf:"varint,1,opt,name=AosCode,proto3" json:"AosCode,omitempty"`
	ExitCode int32  `protobuf:"varint,2,opt,name=ExitCode,proto3" json:"ExitCode,omitempty"`
	Message  string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ErrorInfo) Reset() {
	*x = ErrorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorInfo) ProtoMessage() {}

func (x *ErrorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorInfo.ProtoReflect.Descriptor instead.
func (*ErrorInfo) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{24}
}

func (x *ErrorInfo) GetAosCode() int32 {
	if x != nil {
		return x.AosCode
	}
	return 0
}

func (x *ErrorInfo) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *ErrorInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type OverrideEnvVarStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvVarsStatus []*EnvVarInstanceStatus `protobuf:"bytes,1,rep,name=env_vars_status,json=envVarsStatus,proto3" json:"env_vars_status,omitempty"`
	Error         string                  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *OverrideEnvVarStatus) Reset() {
	*x = OverrideEnvVarStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverrideEnvVarStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverrideEnvVarStatus) ProtoMessage() {}

func (x *OverrideEnvVarStatus) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverrideEnvVarStatus.ProtoReflect.Descriptor instead.
func (*OverrideEnvVarStatus) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{25}
}

func (x *OverrideEnvVarStatus) GetEnvVarsStatus() []*EnvVarInstanceStatus {
	if x != nil {
		return x.EnvVarsStatus
	}
	return nil
}

func (x *OverrideEnvVarStatus) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type EnvVarInstanceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance   *InstanceIdent  `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	VarsStatus []*EnvVarStatus `protobuf:"bytes,2,rep,name=vars_status,json=varsStatus,proto3" json:"vars_status,omitempty"`
}

func (x *EnvVarInstanceStatus) Reset() {
	*x = EnvVarInstanceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvVarInstanceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvVarInstanceStatus) ProtoMessage() {}

func (x *EnvVarInstanceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvVarInstanceStatus.ProtoReflect.Descriptor instead.
func (*EnvVarInstanceStatus) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{26}
}

func (x *EnvVarInstanceStatus) GetInstance() *InstanceIdent {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *EnvVarInstanceStatus) GetVarsStatus() []*EnvVarStatus {
	if x != nil {
		return x.VarsStatus
	}
	return nil
}

type EnvVarStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VarId string `protobuf:"bytes,1,opt,name=var_id,json=varId,proto3" json:"var_id,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *EnvVarStatus) Reset() {
	*x = EnvVarStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvVarStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvVarStatus) ProtoMessage() {}

func (x *EnvVarStatus) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvVarStatus.ProtoReflect.Descriptor instead.
func (*EnvVarStatus) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{27}
}

func (x *EnvVarStatus) GetVarId() string {
	if x != nil {
		return x.VarId
	}
	return ""
}

func (x *EnvVarStatus) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type LogData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogId     string `protobuf:"bytes,1,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	PartCount uint64 `protobuf:"varint,2,opt,name=part_count,json=partCount,proto3" json:"part_count,omitempty"`
	Part      uint64 `protobuf:"varint,3,opt,name=part,proto3" json:"part,omitempty"`
	Data      []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Error     string `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *LogData) Reset() {
	*x = LogData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogData) ProtoMessage() {}

func (x *LogData) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogData.ProtoReflect.Descriptor instead.
func (*LogData) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{28}
}

func (x *LogData) GetLogId() string {
	if x != nil {
		return x.LogId
	}
	return ""
}

func (x *LogData) GetPartCount() uint64 {
	if x != nil {
		return x.PartCount
	}
	return 0
}

func (x *LogData) GetPart() uint64 {
	if x != nil {
		return x.Part
	}
	return 0
}

func (x *LogData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *LogData) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type NodeMonitoring struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp          *timestamp.Timestamp  `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	MonitoringData     *MonitoringData       `protobuf:"bytes,2,opt,name=monitoringData,proto3" json:"monitoringData,omitempty"`
	InstanceMonitoring []*InstanceMonitoring `protobuf:"bytes,3,rep,name=instance_monitoring,json=instanceMonitoring,proto3" json:"instance_monitoring,omitempty"`
}

func (x *NodeMonitoring) Reset() {
	*x = NodeMonitoring{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeMonitoring) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeMonitoring) ProtoMessage() {}

func (x *NodeMonitoring) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeMonitoring.ProtoReflect.Descriptor instead.
func (*NodeMonitoring) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{29}
}

func (x *NodeMonitoring) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *NodeMonitoring) GetMonitoringData() *MonitoringData {
	if x != nil {
		return x.MonitoringData
	}
	return nil
}

func (x *NodeMonitoring) GetInstanceMonitoring() []*InstanceMonitoring {
	if x != nil {
		return x.InstanceMonitoring
	}
	return nil
}

type MonitoringData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ram        uint64            `protobuf:"varint,1,opt,name=ram,proto3" json:"ram,omitempty"`
	Cpu        uint64            `protobuf:"varint,2,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Disk       []*PartitionUsage `protobuf:"bytes,3,rep,name=disk,proto3" json:"disk,omitempty"`
	InTraffic  uint64            `protobuf:"varint,4,opt,name=in_traffic,json=inTraffic,proto3" json:"in_traffic,omitempty"`
	OutTraffic uint64            `protobuf:"varint,5,opt,name=out_traffic,json=outTraffic,proto3" json:"out_traffic,omitempty"`
}

func (x *MonitoringData) Reset() {
	*x = MonitoringData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitoringData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitoringData) ProtoMessage() {}

func (x *MonitoringData) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitoringData.ProtoReflect.Descriptor instead.
func (*MonitoringData) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{30}
}

func (x *MonitoringData) GetRam() uint64 {
	if x != nil {
		return x.Ram
	}
	return 0
}

func (x *MonitoringData) GetCpu() uint64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *MonitoringData) GetDisk() []*PartitionUsage {
	if x != nil {
		return x.Disk
	}
	return nil
}

func (x *MonitoringData) GetInTraffic() uint64 {
	if x != nil {
		return x.InTraffic
	}
	return 0
}

func (x *MonitoringData) GetOutTraffic() uint64 {
	if x != nil {
		return x.OutTraffic
	}
	return 0
}

type PartitionUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UsedSize uint64 `protobuf:"varint,2,opt,name=used_size,json=usedSize,proto3" json:"used_size,omitempty"`
}

func (x *PartitionUsage) Reset() {
	*x = PartitionUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionUsage) ProtoMessage() {}

func (x *PartitionUsage) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionUsage.ProtoReflect.Descriptor instead.
func (*PartitionUsage) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{31}
}

func (x *PartitionUsage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PartitionUsage) GetUsedSize() uint64 {
	if x != nil {
		return x.UsedSize
	}
	return 0
}

type InstanceMonitoring struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance       *InstanceIdent  `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	MonitoringData *MonitoringData `protobuf:"bytes,2,opt,name=monitoringData,proto3" json:"monitoringData,omitempty"`
}

func (x *InstanceMonitoring) Reset() {
	*x = InstanceMonitoring{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceMonitoring) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceMonitoring) ProtoMessage() {}

func (x *InstanceMonitoring) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceMonitoring.ProtoReflect.Descriptor instead.
func (*InstanceMonitoring) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{32}
}

func (x *InstanceMonitoring) GetInstance() *InstanceIdent {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *InstanceMonitoring) GetMonitoringData() *MonitoringData {
	if x != nil {
		return x.MonitoringData
	}
	return nil
}

type Alert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Tag       string               `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	// Types that are assignable to Payload:
	//	*Alert_SystemQuotaAlert
	//	*Alert_InstanceQuotaAlert
	//	*Alert_ResourceValidateAlert
	//	*Alert_DeviceAllocateAlert
	//	*Alert_SystemAlert
	//	*Alert_CoreAlert
	//	*Alert_InstanceAlert
	Payload isAlert_Payload `protobuf_oneof:"Payload"`
}

func (x *Alert) Reset() {
	*x = Alert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alert) ProtoMessage() {}

func (x *Alert) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alert.ProtoReflect.Descriptor instead.
func (*Alert) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{33}
}

func (x *Alert) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Alert) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (m *Alert) GetPayload() isAlert_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Alert) GetSystemQuotaAlert() *SystemQuotaAlert {
	if x, ok := x.GetPayload().(*Alert_SystemQuotaAlert); ok {
		return x.SystemQuotaAlert
	}
	return nil
}

func (x *Alert) GetInstanceQuotaAlert() *InstanceQuotaAlert {
	if x, ok := x.GetPayload().(*Alert_InstanceQuotaAlert); ok {
		return x.InstanceQuotaAlert
	}
	return nil
}

func (x *Alert) GetResourceValidateAlert() *ResourceValidateAlert {
	if x, ok := x.GetPayload().(*Alert_ResourceValidateAlert); ok {
		return x.ResourceValidateAlert
	}
	return nil
}

func (x *Alert) GetDeviceAllocateAlert() *DeviceAllocateAlert {
	if x, ok := x.GetPayload().(*Alert_DeviceAllocateAlert); ok {
		return x.DeviceAllocateAlert
	}
	return nil
}

func (x *Alert) GetSystemAlert() *SystemAlert {
	if x, ok := x.GetPayload().(*Alert_SystemAlert); ok {
		return x.SystemAlert
	}
	return nil
}

func (x *Alert) GetCoreAlert() *CoreAlert {
	if x, ok := x.GetPayload().(*Alert_CoreAlert); ok {
		return x.CoreAlert
	}
	return nil
}

func (x *Alert) GetInstanceAlert() *InstanceAlert {
	if x, ok := x.GetPayload().(*Alert_InstanceAlert); ok {
		return x.InstanceAlert
	}
	return nil
}

type isAlert_Payload interface {
	isAlert_Payload()
}

type Alert_SystemQuotaAlert struct {
	SystemQuotaAlert *SystemQuotaAlert `protobuf:"bytes,3,opt,name=system_quota_alert,json=systemQuotaAlert,proto3,oneof"`
}

type Alert_InstanceQuotaAlert struct {
	InstanceQuotaAlert *InstanceQuotaAlert `protobuf:"bytes,4,opt,name=instance_quota_alert,json=instanceQuotaAlert,proto3,oneof"`
}

type Alert_ResourceValidateAlert struct {
	ResourceValidateAlert *ResourceValidateAlert `protobuf:"bytes,5,opt,name=resource_validate_alert,json=resourceValidateAlert,proto3,oneof"`
}

type Alert_DeviceAllocateAlert struct {
	DeviceAllocateAlert *DeviceAllocateAlert `protobuf:"bytes,6,opt,name=device_allocate_alert,json=deviceAllocateAlert,proto3,oneof"`
}

type Alert_SystemAlert struct {
	SystemAlert *SystemAlert `protobuf:"bytes,7,opt,name=system_alert,json=systemAlert,proto3,oneof"`
}

type Alert_CoreAlert struct {
	CoreAlert *CoreAlert `protobuf:"bytes,8,opt,name=core_alert,json=coreAlert,proto3,oneof"`
}

type Alert_InstanceAlert struct {
	InstanceAlert *InstanceAlert `protobuf:"bytes,9,opt,name=instance_alert,json=instanceAlert,proto3,oneof"`
}

func (*Alert_SystemQuotaAlert) isAlert_Payload() {}

func (*Alert_InstanceQuotaAlert) isAlert_Payload() {}

func (*Alert_ResourceValidateAlert) isAlert_Payload() {}

func (*Alert_DeviceAllocateAlert) isAlert_Payload() {}

func (*Alert_SystemAlert) isAlert_Payload() {}

func (*Alert_CoreAlert) isAlert_Payload() {}

func (*Alert_InstanceAlert) isAlert_Payload() {}

type SystemQuotaAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameter string `protobuf:"bytes,1,opt,name=parameter,proto3" json:"parameter,omitempty"`
	Value     uint64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SystemQuotaAlert) Reset() {
	*x = SystemQuotaAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemQuotaAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemQuotaAlert) ProtoMessage() {}

func (x *SystemQuotaAlert) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemQuotaAlert.ProtoReflect.Descriptor instead.
func (*SystemQuotaAlert) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{34}
}

func (x *SystemQuotaAlert) GetParameter() string {
	if x != nil {
		return x.Parameter
	}
	return ""
}

func (x *SystemQuotaAlert) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type InstanceQuotaAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance  *InstanceIdent `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	Parameter string         `protobuf:"bytes,2,opt,name=parameter,proto3" json:"parameter,omitempty"`
	Value     uint64         `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *InstanceQuotaAlert) Reset() {
	*x = InstanceQuotaAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceQuotaAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceQuotaAlert) ProtoMessage() {}

func (x *InstanceQuotaAlert) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceQuotaAlert.ProtoReflect.Descriptor instead.
func (*InstanceQuotaAlert) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{35}
}

func (x *InstanceQuotaAlert) GetInstance() *InstanceIdent {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *InstanceQuotaAlert) GetParameter() string {
	if x != nil {
		return x.Parameter
	}
	return ""
}

func (x *InstanceQuotaAlert) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type DeviceAllocateAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance *InstanceIdent `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	Device   string         `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	Message  string         `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeviceAllocateAlert) Reset() {
	*x = DeviceAllocateAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceAllocateAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceAllocateAlert) ProtoMessage() {}

func (x *DeviceAllocateAlert) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceAllocateAlert.ProtoReflect.Descriptor instead.
func (*DeviceAllocateAlert) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{36}
}

func (x *DeviceAllocateAlert) GetInstance() *InstanceIdent {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *DeviceAllocateAlert) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *DeviceAllocateAlert) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ResourceValidateAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []*ResourceValidateErrors `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ResourceValidateAlert) Reset() {
	*x = ResourceValidateAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceValidateAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceValidateAlert) ProtoMessage() {}

func (x *ResourceValidateAlert) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceValidateAlert.ProtoReflect.Descriptor instead.
func (*ResourceValidateAlert) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{37}
}

func (x *ResourceValidateAlert) GetErrors() []*ResourceValidateErrors {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ResourceValidateErrors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ErrorMsg []string `protobuf:"bytes,2,rep,name=errorMsg,proto3" json:"errorMsg,omitempty"`
}

func (x *ResourceValidateErrors) Reset() {
	*x = ResourceValidateErrors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceValidateErrors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceValidateErrors) ProtoMessage() {}

func (x *ResourceValidateErrors) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceValidateErrors.ProtoReflect.Descriptor instead.
func (*ResourceValidateErrors) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{38}
}

func (x *ResourceValidateErrors) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceValidateErrors) GetErrorMsg() []string {
	if x != nil {
		return x.ErrorMsg
	}
	return nil
}

type SystemAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SystemAlert) Reset() {
	*x = SystemAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemAlert) ProtoMessage() {}

func (x *SystemAlert) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemAlert.ProtoReflect.Descriptor instead.
func (*SystemAlert) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{39}
}

func (x *SystemAlert) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CoreAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoreComponent string `protobuf:"bytes,1,opt,name=core_component,json=coreComponent,proto3" json:"core_component,omitempty"`
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CoreAlert) Reset() {
	*x = CoreAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoreAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoreAlert) ProtoMessage() {}

func (x *CoreAlert) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoreAlert.ProtoReflect.Descriptor instead.
func (*CoreAlert) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{40}
}

func (x *CoreAlert) GetCoreComponent() string {
	if x != nil {
		return x.CoreComponent
	}
	return ""
}

func (x *CoreAlert) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type InstanceAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance   *InstanceIdent `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	AosVersion uint64         `protobuf:"varint,2,opt,name=aos_version,json=aosVersion,proto3" json:"aos_version,omitempty"`
	Message    string         `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *InstanceAlert) Reset() {
	*x = InstanceAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceAlert) ProtoMessage() {}

func (x *InstanceAlert) ProtoReflect() protoreflect.Message {
	mi := &file_servicemanager_v3_servicemanager_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceAlert.ProtoReflect.Descriptor instead.
func (*InstanceAlert) Descriptor() ([]byte, []int) {
	return file_servicemanager_v3_servicemanager_proto_rawDescGZIP(), []int{41}
}

func (x *InstanceAlert) GetInstance() *InstanceIdent {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *InstanceAlert) GetAosVersion() uint64 {
	if x != nil {
		return x.AosVersion
	}
	return 0
}

func (x *InstanceAlert) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_servicemanager_v3_servicemanager_proto protoreflect.FileDescriptor

var file_servicemanager_v3_servicemanager_proto_rawDesc = []byte{
	0x0a, 0x26, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x76, 0x33, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb3, 0x06, 0x0a,
	0x12, 0x53, 0x4d, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x13, 0x67,
	0x65, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x50, 0x0a, 0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x33, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x4a, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x33, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x46, 0x0a, 0x0d, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x75, 0x6e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x75, 0x6e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x11, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x73, 0x12, 0x53, 0x0a, 0x12, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x59, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x33, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x1a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x33, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x61, 0x73, 0x68,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x17, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x61, 0x73, 0x68, 0x4c, 0x6f, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x11, 0x67, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x13, 0x0a,
	0x11, 0x53, 0x4d, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x59, 0x0a, 0x0f, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x0a,
	0x0e, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x57, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe4, 0x01,
	0x0a, 0x0c, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x3a,
	0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x4c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x12, 0x3d, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x22, 0xf7, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x56,
	0x65, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68,
	0x61, 0x32, 0x35, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x68, 0x61, 0x32,
	0x35, 0x36, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x35, 0x31, 0x32, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x73, 0x68, 0x61, 0x35, 0x31, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xd6,
	0x01, 0x0a, 0x09, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0c,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x56, 0x65, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x68, 0x61, 0x35, 0x31, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x68, 0x61,
	0x35, 0x31, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x76, 0x0a, 0x0a, 0x56, 0x65, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x6f, 0x73, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xbc, 0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x3c, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x57,
	0x0a, 0x0f, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72,
	0x73, 0x12, 0x44, 0x0a, 0x08, 0x65, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x52, 0x07,
	0x65, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x16, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x76, 0x56,
	0x61, 0x72, 0x12, 0x3c, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x31, 0x0a, 0x04, 0x76, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x33, 0x2e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x76,
	0x61, 0x72, 0x73, 0x22, 0x6d, 0x0a, 0x0a, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x74,
	0x74, 0x6c, 0x22, 0x89, 0x01, 0x0a, 0x10, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x69, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6c, 0x6c, 0x22, 0xc9,
	0x01, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x33, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6c, 0x6c, 0x22, 0xce, 0x01, 0x0a, 0x17, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x61, 0x73, 0x68, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x3c, 0x0a,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x33, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6c, 0x6c, 0x22, 0x13, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x22, 0xa6, 0x05, 0x0a, 0x12, 0x53, 0x4d, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x12, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x6e, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53,
	0x0a, 0x12, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x55,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48,
	0x00, 0x52, 0x10, 0x75, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x59, 0x0a, 0x14, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x75, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x12, 0x72, 0x75, 0x6e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x62,
	0x0a, 0x17, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x33, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x15, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x60, 0x0a, 0x17, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x65,
	0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x14,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x03, 0x6c, 0x6f, 0x67, 0x12, 0x4c, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x33, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x05, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x53, 0x4d, 0x4f, 0x75, 0x74, 0x67, 0x6f, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x89, 0x02, 0x0a, 0x11, 0x4e, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x70, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x43, 0x70, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x61, 0x6d, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x54, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x4f, 0x0a, 0x10, 0x55,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x55, 0x0a, 0x12,
	0x52, 0x75, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x22, 0x58, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x09,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x33, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xc9, 0x01,
	0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3c, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0a,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x69, 0x0a, 0x0d, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x22, 0x5b, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x6f, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x41, 0x6f, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x45,
	0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x45,
	0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x7d, 0x0a, 0x14, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x76,
	0x56, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4f, 0x0a, 0x0f, 0x65, 0x6e, 0x76,
	0x5f, 0x76, 0x61, 0x72, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x65, 0x6e, 0x76,
	0x56, 0x61, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x96, 0x01, 0x0a, 0x14, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x76, 0x61, 0x72, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33,
	0x2e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x76,
	0x61, 0x72, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3b, 0x0a, 0x0c, 0x45, 0x6e, 0x76,
	0x56, 0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x61, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x72, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x7d, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x61,
	0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xed, 0x01, 0x0a, 0x0e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x49, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x56, 0x0a,
	0x13, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xab, 0x01, 0x0a, 0x0e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x72, 0x61, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70,
	0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x35, 0x0a, 0x04,
	0x64, 0x69, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x64,
	0x69, 0x73, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x22, 0x41, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x33, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x22, 0x9f, 0x05, 0x0a, 0x05, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x53, 0x0a, 0x12,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52,
	0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x12, 0x59, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x33, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x62, 0x0a, 0x17,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x33, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x12, 0x5c, 0x0a, 0x15, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x43,
	0x0a, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x43, 0x6f, 0x72, 0x65,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x12, 0x49, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x42, 0x09, 0x0a,
	0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x46, 0x0a, 0x10, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x86, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x13, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x12, 0x3c, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x5a, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x41, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x48, 0x0a,
	0x16, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x27, 0x0a, 0x0b, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x4c, 0x0a, 0x09, 0x43, 0x6f, 0x72, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x88,
	0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x12, 0x3c, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x6d, 0x0a, 0x09, 0x53, 0x4d, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x60, 0x0a, 0x0a, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x4d, 0x12, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x53, 0x4d, 0x4f, 0x75, 0x74, 0x67, 0x6f,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x25, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e,
	0x53, 0x4d, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_servicemanager_v3_servicemanager_proto_rawDescOnce sync.Once
	file_servicemanager_v3_servicemanager_proto_rawDescData = file_servicemanager_v3_servicemanager_proto_rawDesc
)

func file_servicemanager_v3_servicemanager_proto_rawDescGZIP() []byte {
	file_servicemanager_v3_servicemanager_proto_rawDescOnce.Do(func() {
		file_servicemanager_v3_servicemanager_proto_rawDescData = protoimpl.X.CompressGZIP(file_servicemanager_v3_servicemanager_proto_rawDescData)
	})
	return file_servicemanager_v3_servicemanager_proto_rawDescData
}

var file_servicemanager_v3_servicemanager_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_servicemanager_v3_servicemanager_proto_goTypes = []interface{}{
	(*SMIncomingMessages)(nil),      // 0: servicemanager.v3.SMIncomingMessages
	(*GetUnitConfigStatus)(nil),     // 1: servicemanager.v3.GetUnitConfigStatus
	(*CheckUnitConfig)(nil),         // 2: servicemanager.v3.CheckUnitConfig
	(*SetUnitConfig)(nil),           // 3: servicemanager.v3.SetUnitConfig
	(*RunInstances)(nil),            // 4: servicemanager.v3.RunInstances
	(*ServiceInfo)(nil),             // 5: servicemanager.v3.ServiceInfo
	(*LayerInfo)(nil),               // 6: servicemanager.v3.LayerInfo
	(*VesionInfo)(nil),              // 7: servicemanager.v3.VesionInfo
	(*InstanceInfo)(nil),            // 8: servicemanager.v3.InstanceInfo
	(*OverrideEnvVars)(nil),         // 9: servicemanager.v3.OverrideEnvVars
	(*OverrideInstanceEnvVar)(nil),  // 10: servicemanager.v3.OverrideInstanceEnvVar
	(*EnvVarInfo)(nil),              // 11: servicemanager.v3.EnvVarInfo
	(*SystemLogRequest)(nil),        // 12: servicemanager.v3.SystemLogRequest
	(*InstanceLogRequest)(nil),      // 13: servicemanager.v3.InstanceLogRequest
	(*InstanceCrashLogRequest)(nil), // 14: servicemanager.v3.InstanceCrashLogRequest
	(*GetNodeMonitoring)(nil),       // 15: servicemanager.v3.GetNodeMonitoring
	(*SMOutgoingMessages)(nil),      // 16: servicemanager.v3.SMOutgoingMessages
	(*NodeConfiguration)(nil),       // 17: servicemanager.v3.NodeConfiguration
	(*Partition)(nil),               // 18: servicemanager.v3.Partition
	(*UnitConfigStatus)(nil),        // 19: servicemanager.v3.UnitConfigStatus
	(*RunInstancesStatus)(nil),      // 20: servicemanager.v3.RunInstancesStatus
	(*UpdateInstancesStatus)(nil),   // 21: servicemanager.v3.UpdateInstancesStatus
	(*InstanceStatus)(nil),          // 22: servicemanager.v3.InstanceStatus
	(*InstanceIdent)(nil),           // 23: servicemanager.v3.InstanceIdent
	(*ErrorInfo)(nil),               // 24: servicemanager.v3.ErrorInfo
	(*OverrideEnvVarStatus)(nil),    // 25: servicemanager.v3.OverrideEnvVarStatus
	(*EnvVarInstanceStatus)(nil),    // 26: servicemanager.v3.EnvVarInstanceStatus
	(*EnvVarStatus)(nil),            // 27: servicemanager.v3.EnvVarStatus
	(*LogData)(nil),                 // 28: servicemanager.v3.LogData
	(*NodeMonitoring)(nil),          // 29: servicemanager.v3.NodeMonitoring
	(*MonitoringData)(nil),          // 30: servicemanager.v3.MonitoringData
	(*PartitionUsage)(nil),          // 31: servicemanager.v3.PartitionUsage
	(*InstanceMonitoring)(nil),      // 32: servicemanager.v3.InstanceMonitoring
	(*Alert)(nil),                   // 33: servicemanager.v3.Alert
	(*SystemQuotaAlert)(nil),        // 34: servicemanager.v3.SystemQuotaAlert
	(*InstanceQuotaAlert)(nil),      // 35: servicemanager.v3.InstanceQuotaAlert
	(*DeviceAllocateAlert)(nil),     // 36: servicemanager.v3.DeviceAllocateAlert
	(*ResourceValidateAlert)(nil),   // 37: servicemanager.v3.ResourceValidateAlert
	(*ResourceValidateErrors)(nil),  // 38: servicemanager.v3.ResourceValidateErrors
	(*SystemAlert)(nil),             // 39: servicemanager.v3.SystemAlert
	(*CoreAlert)(nil),               // 40: servicemanager.v3.CoreAlert
	(*InstanceAlert)(nil),           // 41: servicemanager.v3.InstanceAlert
	(*timestamp.Timestamp)(nil),     // 42: google.protobuf.Timestamp
}
var file_servicemanager_v3_servicemanager_proto_depIdxs = []int32{
	1,  // 0: servicemanager.v3.SMIncomingMessages.get_unit_config_status:type_name -> servicemanager.v3.GetUnitConfigStatus
	2,  // 1: servicemanager.v3.SMIncomingMessages.check_unit_config:type_name -> servicemanager.v3.CheckUnitConfig
	3,  // 2: servicemanager.v3.SMIncomingMessages.set_unit_config:type_name -> servicemanager.v3.SetUnitConfig
	4,  // 3: servicemanager.v3.SMIncomingMessages.run_instances:type_name -> servicemanager.v3.RunInstances
	9,  // 4: servicemanager.v3.SMIncomingMessages.override_env_vars:type_name -> servicemanager.v3.OverrideEnvVars
	12, // 5: servicemanager.v3.SMIncomingMessages.system_log_request:type_name -> servicemanager.v3.SystemLogRequest
	13, // 6: servicemanager.v3.SMIncomingMessages.instance_log_request:type_name -> servicemanager.v3.InstanceLogRequest
	14, // 7: servicemanager.v3.SMIncomingMessages.instance_crash_log_request:type_name -> servicemanager.v3.InstanceCrashLogRequest
	15, // 8: servicemanager.v3.SMIncomingMessages.get_node_monitoring:type_name -> servicemanager.v3.GetNodeMonitoring
	5,  // 9: servicemanager.v3.RunInstances.services:type_name -> servicemanager.v3.ServiceInfo
	6,  // 10: servicemanager.v3.RunInstances.layers:type_name -> servicemanager.v3.LayerInfo
	8,  // 11: servicemanager.v3.RunInstances.instances:type_name -> servicemanager.v3.InstanceInfo
	7,  // 12: servicemanager.v3.ServiceInfo.version_info:type_name -> servicemanager.v3.VesionInfo
	7,  // 13: servicemanager.v3.LayerInfo.version_info:type_name -> servicemanager.v3.VesionInfo
	23, // 14: servicemanager.v3.InstanceInfo.instance:type_name -> servicemanager.v3.InstanceIdent
	10, // 15: servicemanager.v3.OverrideEnvVars.env_vars:type_name -> servicemanager.v3.OverrideInstanceEnvVar
	23, // 16: servicemanager.v3.OverrideInstanceEnvVar.instance:type_name -> servicemanager.v3.InstanceIdent
	11, // 17: servicemanager.v3.OverrideInstanceEnvVar.vars:type_name -> servicemanager.v3.EnvVarInfo
	42, // 18: servicemanager.v3.EnvVarInfo.ttl:type_name -> google.protobuf.Timestamp
	42, // 19: servicemanager.v3.SystemLogRequest.from:type_name -> google.protobuf.Timestamp
	42, // 20: servicemanager.v3.SystemLogRequest.till:type_name -> google.protobuf.Timestamp
	23, // 21: servicemanager.v3.InstanceLogRequest.instance:type_name -> servicemanager.v3.InstanceIdent
	42, // 22: servicemanager.v3.InstanceLogRequest.from:type_name -> google.protobuf.Timestamp
	42, // 23: servicemanager.v3.InstanceLogRequest.till:type_name -> google.protobuf.Timestamp
	23, // 24: servicemanager.v3.InstanceCrashLogRequest.instance:type_name -> servicemanager.v3.InstanceIdent
	42, // 25: servicemanager.v3.InstanceCrashLogRequest.from:type_name -> google.protobuf.Timestamp
	42, // 26: servicemanager.v3.InstanceCrashLogRequest.till:type_name -> google.protobuf.Timestamp
	17, // 27: servicemanager.v3.SMOutgoingMessages.node_configuration:type_name -> servicemanager.v3.NodeConfiguration
	19, // 28: servicemanager.v3.SMOutgoingMessages.unit_config_status:type_name -> servicemanager.v3.UnitConfigStatus
	20, // 29: servicemanager.v3.SMOutgoingMessages.run_instances_status:type_name -> servicemanager.v3.RunInstancesStatus
	21, // 30: servicemanager.v3.SMOutgoingMessages.update_instances_status:type_name -> servicemanager.v3.UpdateInstancesStatus
	25, // 31: servicemanager.v3.SMOutgoingMessages.override_env_var_status:type_name -> servicemanager.v3.OverrideEnvVarStatus
	28, // 32: servicemanager.v3.SMOutgoingMessages.log:type_name -> servicemanager.v3.LogData
	29, // 33: servicemanager.v3.SMOutgoingMessages.node_monitoring:type_name -> servicemanager.v3.NodeMonitoring
	33, // 34: servicemanager.v3.SMOutgoingMessages.alert:type_name -> servicemanager.v3.Alert
	18, // 35: servicemanager.v3.NodeConfiguration.partitions:type_name -> servicemanager.v3.Partition
	22, // 36: servicemanager.v3.RunInstancesStatus.instances:type_name -> servicemanager.v3.InstanceStatus
	22, // 37: servicemanager.v3.UpdateInstancesStatus.instances:type_name -> servicemanager.v3.InstanceStatus
	23, // 38: servicemanager.v3.InstanceStatus.instance:type_name -> servicemanager.v3.InstanceIdent
	24, // 39: servicemanager.v3.InstanceStatus.error_info:type_name -> servicemanager.v3.ErrorInfo
	26, // 40: servicemanager.v3.OverrideEnvVarStatus.env_vars_status:type_name -> servicemanager.v3.EnvVarInstanceStatus
	23, // 41: servicemanager.v3.EnvVarInstanceStatus.instance:type_name -> servicemanager.v3.InstanceIdent
	27, // 42: servicemanager.v3.EnvVarInstanceStatus.vars_status:type_name -> servicemanager.v3.EnvVarStatus
	42, // 43: servicemanager.v3.NodeMonitoring.timestamp:type_name -> google.protobuf.Timestamp
	30, // 44: servicemanager.v3.NodeMonitoring.monitoringData:type_name -> servicemanager.v3.MonitoringData
	32, // 45: servicemanager.v3.NodeMonitoring.instance_monitoring:type_name -> servicemanager.v3.InstanceMonitoring
	31, // 46: servicemanager.v3.MonitoringData.disk:type_name -> servicemanager.v3.PartitionUsage
	23, // 47: servicemanager.v3.InstanceMonitoring.instance:type_name -> servicemanager.v3.InstanceIdent
	30, // 48: servicemanager.v3.InstanceMonitoring.monitoringData:type_name -> servicemanager.v3.MonitoringData
	42, // 49: servicemanager.v3.Alert.timestamp:type_name -> google.protobuf.Timestamp
	34, // 50: servicemanager.v3.Alert.system_quota_alert:type_name -> servicemanager.v3.SystemQuotaAlert
	35, // 51: servicemanager.v3.Alert.instance_quota_alert:type_name -> servicemanager.v3.InstanceQuotaAlert
	37, // 52: servicemanager.v3.Alert.resource_validate_alert:type_name -> servicemanager.v3.ResourceValidateAlert
	36, // 53: servicemanager.v3.Alert.device_allocate_alert:type_name -> servicemanager.v3.DeviceAllocateAlert
	39, // 54: servicemanager.v3.Alert.system_alert:type_name -> servicemanager.v3.SystemAlert
	40, // 55: servicemanager.v3.Alert.core_alert:type_name -> servicemanager.v3.CoreAlert
	41, // 56: servicemanager.v3.Alert.instance_alert:type_name -> servicemanager.v3.InstanceAlert
	23, // 57: servicemanager.v3.InstanceQuotaAlert.instance:type_name -> servicemanager.v3.InstanceIdent
	23, // 58: servicemanager.v3.DeviceAllocateAlert.instance:type_name -> servicemanager.v3.InstanceIdent
	38, // 59: servicemanager.v3.ResourceValidateAlert.errors:type_name -> servicemanager.v3.ResourceValidateErrors
	23, // 60: servicemanager.v3.InstanceAlert.instance:type_name -> servicemanager.v3.InstanceIdent
	16, // 61: servicemanager.v3.SMService.RegisterSM:input_type -> servicemanager.v3.SMOutgoingMessages
	0,  // 62: servicemanager.v3.SMService.RegisterSM:output_type -> servicemanager.v3.SMIncomingMessages
	62, // [62:63] is the sub-list for method output_type
	61, // [61:62] is the sub-list for method input_type
	61, // [61:61] is the sub-list for extension type_name
	61, // [61:61] is the sub-list for extension extendee
	0,  // [0:61] is the sub-list for field type_name
}

func init() { file_servicemanager_v3_servicemanager_proto_init() }
func file_servicemanager_v3_servicemanager_proto_init() {
	if File_servicemanager_v3_servicemanager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_servicemanager_v3_servicemanager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMIncomingMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUnitConfigStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUnitConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetUnitConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunInstances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VesionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverrideEnvVars); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverrideInstanceEnvVar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvVarInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceCrashLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeMonitoring); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMOutgoingMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Partition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnitConfigStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunInstancesStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInstancesStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceIdent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverrideEnvVarStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvVarInstanceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvVarStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeMonitoring); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitoringData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceMonitoring); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemQuotaAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceQuotaAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceAllocateAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceValidateAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceValidateErrors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoreAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_servicemanager_v3_servicemanager_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_servicemanager_v3_servicemanager_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*SMIncomingMessages_GetUnitConfigStatus)(nil),
		(*SMIncomingMessages_CheckUnitConfig)(nil),
		(*SMIncomingMessages_SetUnitConfig)(nil),
		(*SMIncomingMessages_RunInstances)(nil),
		(*SMIncomingMessages_OverrideEnvVars)(nil),
		(*SMIncomingMessages_SystemLogRequest)(nil),
		(*SMIncomingMessages_InstanceLogRequest)(nil),
		(*SMIncomingMessages_InstanceCrashLogRequest)(nil),
		(*SMIncomingMessages_GetNodeMonitoring)(nil),
	}
	file_servicemanager_v3_servicemanager_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*SMOutgoingMessages_NodeConfiguration)(nil),
		(*SMOutgoingMessages_UnitConfigStatus)(nil),
		(*SMOutgoingMessages_RunInstancesStatus)(nil),
		(*SMOutgoingMessages_UpdateInstancesStatus)(nil),
		(*SMOutgoingMessages_OverrideEnvVarStatus)(nil),
		(*SMOutgoingMessages_Log)(nil),
		(*SMOutgoingMessages_NodeMonitoring)(nil),
		(*SMOutgoingMessages_Alert)(nil),
	}
	file_servicemanager_v3_servicemanager_proto_msgTypes[33].OneofWrappers = []interface{}{
		(*Alert_SystemQuotaAlert)(nil),
		(*Alert_InstanceQuotaAlert)(nil),
		(*Alert_ResourceValidateAlert)(nil),
		(*Alert_DeviceAllocateAlert)(nil),
		(*Alert_SystemAlert)(nil),
		(*Alert_CoreAlert)(nil),
		(*Alert_InstanceAlert)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_servicemanager_v3_servicemanager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_servicemanager_v3_servicemanager_proto_goTypes,
		DependencyIndexes: file_servicemanager_v3_servicemanager_proto_depIdxs,
		MessageInfos:      file_servicemanager_v3_servicemanager_proto_msgTypes,
	}.Build()
	File_servicemanager_v3_servicemanager_proto = out.File
	file_servicemanager_v3_servicemanager_proto_rawDesc = nil
	file_servicemanager_v3_servicemanager_proto_goTypes = nil
	file_servicemanager_v3_servicemanager_proto_depIdxs = nil
}
